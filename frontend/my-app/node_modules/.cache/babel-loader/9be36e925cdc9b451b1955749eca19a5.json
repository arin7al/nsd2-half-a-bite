{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useTypedSelector } from './../hooks/useTypedSelector';\nimport { useState } from \"react\";\nimport store from \"../redux/store\";\nimport { getCookie } from \"./cookieManager\";\n/* Regular */\n\nexport const isLogged = () => Boolean(store.getState().main.isLogged);\nexport const getAuthorizationToken = () => getCookie(\"AuthToken\");\nexport const getAuthorizationHeader = () => ({\n  Authorization: `Bearer ${getAuthorizationToken()}`\n});\n/* Hooks */\n\nexport const useLogged = () => {\n  _s();\n\n  const storeLogged = useTypedSelector(store => store.main.isLogged);\n  const [logged, setLogged] = useState(storeLogged);\n  if (logged !== storeLogged) setLogged(storeLogged);\n  return logged;\n};\n\n_s(useLogged, \"v57FvsIG8pvxZxbaRr5SaexRW2U=\", false, function () {\n  return [useTypedSelector];\n});","map":{"version":3,"sources":["/Users/martinlee/nsd 2/nsd2-half-a-bite/frontend/my-app/src/utils/userService.ts"],"names":["useTypedSelector","useState","store","getCookie","isLogged","Boolean","getState","main","getAuthorizationToken","getAuthorizationHeader","Authorization","useLogged","storeLogged","logged","setLogged"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAGA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAMC,OAAO,CAACH,KAAK,CAACI,QAAN,GAAiBC,IAAjB,CAAsBH,QAAvB,CAA9B;AAEP,OAAO,MAAMI,qBAAqB,GAAG,MAAML,SAAS,CAAC,WAAD,CAA7C;AACP,OAAO,MAAMM,sBAAsB,GAAG,OAAO;AAAEC,EAAAA,aAAa,EAAG,UAASF,qBAAqB,EAAG;AAAnD,CAAP,CAA/B;AAEP;;AAEA,OAAO,MAAMG,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAMC,WAAW,GAAGZ,gBAAgB,CAACE,KAAK,IAAIA,KAAK,CAACK,IAAN,CAAWH,QAArB,CAApC;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAACW,WAAD,CAApC;AAEA,MAAIC,MAAM,KAAKD,WAAf,EACIE,SAAS,CAACF,WAAD,CAAT;AAEJ,SAAOC,MAAP;AACH,CARM;;GAAMF,S;UACWX,gB","sourcesContent":["import { useTypedSelector } from './../hooks/useTypedSelector';\nimport { useState } from \"react\";\nimport store from \"../redux/store\";\nimport { getCookie } from \"./cookieManager\";\n\n\n/* Regular */\n\nexport const isLogged = () => Boolean(store.getState().main.isLogged);\n\nexport const getAuthorizationToken = () => getCookie(\"AuthToken\");\nexport const getAuthorizationHeader = () => ({ Authorization: `Bearer ${getAuthorizationToken()}` });\n\n/* Hooks */\n\nexport const useLogged = () => {\n    const storeLogged = useTypedSelector(store => store.main.isLogged);\n    const [logged, setLogged] = useState(storeLogged);\n\n    if (logged !== storeLogged)\n        setLogged(storeLogged);\n\n    return logged;\n};"]},"metadata":{},"sourceType":"module"}